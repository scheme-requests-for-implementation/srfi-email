--- /tmp/vmsort.scm	Fri Sep 30 13:29:47 2005
+++ vmsort.scm	Fri Sep 30 11:52:59 2005
@@ -53,13 +66,13 @@
 
 (define (%vector-merge! v v1 v2 elt< start0 start1 end1 start2 end2)
   (letrec ((vblit (lambda (fromv j i end)      ; Blit FROMV[J,END) to V[I,?].
-		    (let lp ((j j) (i i))
-		      (vector-set! v i (vector-ref fromv j))
-		      (let ((j (+ j 1)))
-			(if (< j end) (lp j (+ i 1))))))))
+                    (let lp ((j j) (i i))
+                      (vector-set! v i (vector-ref fromv j))
+                      (let ((j (+ j 1)))
+                        (if (< j end) (lp j (+ i 1))))))))
 
-    (cond ((<= end1 start1) (if (< start2 end2) (vblit v2 start2 start0)))
-	  ((<= end2 start2) (vblit v1 start1 start0))
+    (cond ((<= end1 start1) (if (< start2 end2) (vblit v2 start2 start0 end2)))
+          ((<= end2 start2) (vblit v1 start1 start0 end1))
 
 	  ;; Invariants: I is next index of V to write; X = V1[J]; Y = V2[K].
 	  (else (let lp ((i start0)
